type IoTDevice @model {
  id: ID!
  uuid: String!
  type: String!
  fields: [String]!
}

type IoTData @model(subscriptions: { level: public }) @key(fields: ["uuid", "ts"]) @auth (
    rules: [
        { allow: private, provider: iam, operations: [create] },
        { allow: private, provider: userPools , operations: [read] }
    ]
) {
  uuid: ID!
	ts: Int!
	type: String!
	battery: Int
	moisture: Int
	CO2: Int
	pH: Float
	conductivity: Float
	solids: Int
	salinity: Float
	s_gravity: Float
	uptime: [Int]
}

type Post @model @auth(rules: [{allow: owner, operations: [create]}]) {
  id: ID!
  title: String!
  content: String!
  votes: Int!
  owner: String
  comments: [Comment] @connection(name: "PostComments")
  tags: String
}

type Comment @model @auth(rules: [{allow: owner, operations: [create]}]) {
  id: ID!
  owner: String
  post: Post! @connection(name: "PostComments")
  content: String!
}

type Dashboard @model @auth(rules: [{allow: owner, operations: [create, update, delete, read]}]) {
  id: ID!
  name: String
  owner: String
  desc: String
  charts: [Chart] @connection(name: "DashboardCharts")
  tags: [String]!
}

type Chart @model {
  id: ID!
  name: String
  type: String
  category: String
  dataset1: String
  field1: String
  dataset2: String
  field2: String
  dashboard: Dashboard @connection(name: "DashboardCharts")
}

type Dataset @model @auth (
    rules: [
        { allow: private, provider: iam, operations: [create] },
        { allow: private, provider: userPools , operations: [create, read] }
    ]
) {
  id: ID!
  name: String
  desc: String
  api_url: String
  parent_url: String
  type: String
  fields: [Field] @connection(name: "DatasetFields")
}

type Field @model @auth (
    rules: [
        { allow: private, provider: iam, operations: [create] },
        { allow: private, provider: userPools , operations: [create, read] }
    ]
) {
  id: ID!
  name: String
  normalized_name: String
  alias: String
  type: String
  dataset: Dataset @connection(name: "DatasetFields")
}

type Query {
  getARCGISData(dataset: String, field: String): String @function(name: "getARCGISData-${env}")
  createDatasetAndFields(url: String): String @function(name: "createDatasetAndFields-${env}")
}
